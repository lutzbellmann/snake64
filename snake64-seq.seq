; SNAKE64; ----------------; ----------------; BY DR. LUTZ BELLMANN; ----------------; ----------------; KERNAL ROUTINESCINT     = $FF81IOINIT   = $FF84GETIN    = $FFE4RAMTAS   = $FF87; MEMORY AREASVICMEM   = $0400COLMEM   = $D800BUFX     = $A000BUFY     = $A100; REGISTERSBGCOL0   = $D021EXTCOL   = $D020SIGVOL   = $D418RANDOM   = $D41BVCREG3   = $D412FRELO3   = $D40EFREHI3   = $D40F; VECTORSSTDIRQ   = $0314POINT0   = $F9POINT1   = $FB; ZERO PAGER6510    = $01; CONSTANTSBLACK    = $00WHITE    = $01MEDGREY  = $0CLRED     = $0ASTARTX   = 18      ; INITIAL X POSSTARTY   = 14      ; INITIAL Y POSSPEED0   = 50SPEED1   = 5; VARIABLESDIR      = $A200LONGER   = $A201KILLX    = $A202KILLY    = $A203SPEED    = $A204RANDL    = $A205RANDH    = $A206GORND    = $A207SPEEDC   = $A208POINTSL  = $A209POINTSH  = $A20ALENGTH   = $A20B         *= $0801         .WORD MAIN         .BYTE $0A,$00,$9E,$20,$28,$32         .BYTE $30,$38,$30,$29         .BYTE $00,$00,$00         *= $0820MAIN     JSR IOINIT         LDA R6510  ; SWITCH BASIC         AND #%11111110 ; OUT         STA R6510         JSR SETSCR         JSR SETTITLE         JSR SETGAME         JSR INITBUF         JSR FILLBUF         JSR PRTSNAKEEVER     JSR GAMELOOP         JMP EVER         RTS; GAME LOOP ROUTINES; --------------------GAMELOOP JSR FETCHKEY ; GET KEY INPUT         JSR PRTCHERY         LDA SPEED    ; CHECK IF SPEED         BNE GAMEFW0  ; IS 0         LDA DIR      ; RESET ALREADY         AND #%00001111 ; PRESSED BITS         STA DIR         JSR MOVEBUF  ; IF YES MOVE         JSR MOVSNAKE ; AND PRINT         JSR EATCHRY  ; CHECK EAT CHRY         LDA SPEEDC   ; RESET SPEED         STA SPEEDGAMEFW0  RTS; PREPARE THE SCREEN; ---------------------SETSCR   JSR CINT     ; INIT SCREEN         LDA #BLACK         STA BGCOL0   ; INIT BACKGROUND         LDA #MEDGREY         STA EXTCOL   ; INIT BORDER         LDX #$00SCR0     LDA #$A0     ; FIRST TWO         STA VICMEM,X ; LINES SHOULD         LDA #MEDGREY ; STAY GREY         STA $D800,X         INX         CPX #$50         BNE SCR0         LDA #WHITESETCOL   LDX #$00SCR1     STA $D850,X ; CLEAR COLMEM         STA $D900,X  ; WITH WHITE         STA $DA00,X         STA $DB00,X         INX         BNE SCR1         RTSSETTITLE LDA #10         LDX #11         JSR CALCSCR         LDY #$00         LDA #$0E         JSR $FFD2TIT0     LDA TITLE,Y         STA (POINT0),Y         INY         CPY #TITLELEN         BNE TIT0TIT1     JSR GETIN         CMP #$20         BNE TIT1         LDY #255TIT2     DEY         LDA #$20         STA (POINT0),Y         CPY #$00         BNE TIT2         RTSTITLE    = *         .TEXT "      SNAKE64       "         .TEXT "                    "         .TEXT "BY DR. LUTZ BELLMANN"         .TEXT "                    "         .TEXT "PRESS SPACE TO START"TITLELEN = *-TITLE; SET GAME PARAMETERS; --------------------SETGAME  LDA #SPEED0  ; WAIT BEFORE STRT         STA SPEED         LDA #SPEED1  ; SET INITIAL         STA SPEEDC   ; SPEED         LDA #$00     ; SET INITIAL ELON         STA LONGER         STA LENGTH   ; INIT LENGTH         STA POINTSL  ; INIT SCORE         STA POINTSH  ; COUNTER         JSR PRTPOINTS; AND PRINT         LDA #$01     ; SET DIRECTIO         STA DIR      ; UP (1)         STA GORND         LDA #$FF     ; SETUP RANDOM         STA FRELO3   ; NUMBER         STA FREHI3   ; GENERATOR         LDA #$80         STA VCREG3         SEI          ; LOCK INTERRUPTS         LDA #<GOIRQ  ; SET VECTOR         STA STDIRQ   ; TO NEW IRQ         LDA #>GOIRQ  ; ROUTINE         STA STDIRQ+1         CLI         RTS; DEAD SEQUENCE; --------------------GODEAD   LDA #LRED    ; SET COL RED ALL         JSR SETCOL         LDA #9       ; POSITION CURSOR         LDX #13         JSR CALCSCR  ; CALC SCREEN POS         LDY #$00         LDA #$0E     ; LOWER CASE         JSR $FFD2    ; ACTIVATE (SCREENOUT0     LDA OUTEL,Y    ; PRINT GO SCREE         STA (POINT0),Y         INY         CPY #OUTELLEN         BNE OUT0OUT1     JSR GETIN    ; FETCH KEY         CMP #78      ; IF N EXIT         BEQ EXIT         CMP #89         BNE OUT1     ; IF Y REPEAT         JMP MAINEXIT     JSR IOINIT         JSR CINT         BRKOUTEL    = *         .TEXT "GAME OVER. AGAIN?(Y/N)"OUTELLEN = *-OUTEL; REGISTER DIRECTION CHANGE; --------------------FETCHKEY LDA DIR         AND #%11110000         BEQ GET0         RTSGET0     JSR GETIN    ; SENSE KEYSTROKE         CMP #"W"     ; UP         BEQ UP         CMP #"D"         BEQ RIGHT    ; RIGHT         CMP #"S"         BEQ DOWN     ; DOWN         CMP #"A"         BEQ LEFT         RTSLEFT     LDA DIR      ; LEFT         CMP #$02         BEQ GET0         LDA #$F4         STA DIR         RTSUP       LDA DIR         CMP #$03         BEQ GET0         LDA #$F1         STA DIR         RTSRIGHT    LDA DIR         CMP #$04         BEQ GET0         LDA #$F2         STA DIR         RTSDOWN     LDA DIR         CMP #$01         BEQ GET0         LDA #$F3         STA DIR         RTS; EAT CHERRY; --------------------EATCHRY  LDA GORND         CMP #4         BNE EXEAT         LDA LENGTH         CMP #237         BCS EAT0         LDA #2         STA LONGER         INC LENGTH         INC LENGTHEAT0     JSR ADDPOINTS         JSR PRTPOINTS         LDA #1         STA GORNDEXEAT    RTS; ADD POINTS TO SCORE; --------------------ADDPOINTS SED        ; DECIMAL MODE         LDA POINTSL         CLC         ADC #$10    ; ADD 10 POINTS         STA POINTSL         LDA POINTSH ; ON CARRY SET         ADC #$00    ; ADD ON HIGHBYTE         STA POINTSH         CLD         ; BINARY MODE         RTS; PRINT POINTS DURING GAME; --------------------PRTPOINTS LDA POINTSH   ; LOAD HIGH BYTE         AND #%11110000 ; SEP UPPER NIBB         LSR A          ; LOGICAL SHIFT         LSR A          ; TO THE         LSR A          ; RIGHT         LSR A         CLC         ADC #48        ; ADD 48 TO ÁÓÃI         STA VICMEM+18         LDA POINTSH         AND #%00001111 ; LOWER NIBBLE         CLC         ADC #48         STA VICMEM+19         LDA POINTSL    ; LOW BYTE         AND #%11110000 ; UPPER NIBBLE         LSR A         LSR A         LSR A         LSR A         CLC         ADC #48         STA VICMEM+20         LDA POINTSL         AND #%00001111 ; LOWER NIBBLE         CLC         ADC #48         STA VICMEM+21         RTS; PRINT SNAKE FROM BUFFER; --------------------PRTSNAKE LDY #$00PRT0     LDA BUFX,Y         CMP #$FF       ; HEAD REACHED         BEQ PRT1         LDX BUFY,Y     ; GET SCREEN         JSR CALCSCR    ; VECTOR         LDX #$00         INY         LDA #$A0   ; INVERSE SPACE         LDX #$00       ; RESET X         STA (POINT0,X)  ; PRINT SCREEN         JMP PRT0PRT1     RTS; MOVE SNAKE FORWARD; --------------------MOVSNAKE JSR KILLTAIL         LDY #$00MOV0     LDA BUFX,Y   ; SEARCH HEAD         CMP #$FF     ; FOUND         BEQ MOV1     ; MOVE FORWARD         INY          ; INC COUNTER         JMP MOV0     ; CHECK AGAINMOV1     DEY         LDA BUFX,Y   ; LOAD ROW         LDX BUFY,Y   ; LOAD COLUMN         JSR CALCSCR  ; CALC POINTER; CHECK IF CHERRY IS EATEN         LDX #$00     ; CLEAR X         LDA (POINT0,X) ; CHECK CHERRY         CMP #42         BNE MOV2     ; IF NOT, GO ON         LDA #$04     ; OTHERWISE         STA GORND    ; SET GORND 4; CHECK IF SNAKE EATS ITSELFMOV2     CMP #$A0     ; CHECK SNAKE         BNE MOV3         JSR GODEAD   ; END OF GAMEMOV3     LDA #$A0         ; PRINT HEAD         LDX #$00     ; TO POSITION         STA (POINT0,X)         RTS; KILL TAIL OF SNAKE; --------------------KILLTAIL LDY #$00         LDA KILLX      ; CHECK FOR         CMP #$FF       ; END OF SNAKE         BEQ KILL0      ; JUMP IF NOTHIN         LDX KILLY      ; X --> ROW         JSR CALCSCR    ; CALC SCREEN         LDA #$20       ; PRINT SPACE         LDX #$00       ; TO END OF         STA (POINT0,X) ; SNAKE         LDA #$FF         STA KILLX      ; RESET POINTER         STA KILLY      ; TO ENDKILL0    RTS; PRINT CHERRY; --------------------PRTCHERY LDA GORND         CMP #3    ; PRINT CHERRY FOR         BCC EXCHR ; FLAG = 3         LDA RANDH ; CLIP HIGH BYTE         AND #%00000011         STA RANDH ; TO 3(MAX 1023)         CMP #3    ; IF HB IS NOT 3         BEQ PRC0  ; ALL IS WITHIN 999         CMP #0    ; IF HB IS 0         BNE PRC2         LDA RANDL ; CHECK IF FIRST         CMP #$51  ; TWO LINES HIT         BCS PRC2  ; IF YES, NEW NUM         JMP PRC1  ; IF NOT, PRINTPRC0     LDA RANDL ; OTHERWISE CHECK         CMP #$E8  ; LOWBYTE < 232         BCC PRC2  ; IF YES GO ONPRC1     LDA #1    ; OR SET FLG FOR NEW         STA GORND ; RANDOM NUMBERS AND         RTS       ; EXITPRC2     LDA #>VICMEM ; POINTER TO BASE         STA POINT0+1 ; OF VIC MEMORY         LDA #<VICMEM         STA POINT0         CLC          ; ADD POSITION OF         ADC RANDL         STA POINT0         LDA POINT0+1 ; CHERRY (16BIT)         ADC RANDH         STA POINT0+1         LDX #0         LDA (POINT0,X) ; CHECK IF         CMP #$A0       ; INSIDEOF SNAKE         BEQ EXCHR      ; THEN WAIT         LDA #42        ; SCREENCODE         STA (POINT0,X) ; PRINT CHERRY         STX GORND      ; RESET FLAGEXCHR    RTS; CALC SCREEN POSITION; POS IN POINT0, A COL, X ROW; --------------------CALCSCR  PHA          ; SAVE ACCU         TXA          ; SAVE X         PHA         LDA #<VICMEM ; CREATE VECTOR         STA POINT0   ; TO BASE OF         LDA #>VICMEM ; SCREEN MEMORY         STA POINT0+1         PLA         TAX          ; GET X BACK         BEQ CALC1    ; ROW 0 --> NEXTCALC0    CLC         LDA POINT0   ; INCR BY ONE ROW         ADC #$28         STA POINT0         LDA POINT0+1         ADC #$00         STA POINT0+1         DEX          ; DEC ROW COUNT         BNE CALC0    ; LAST ROWCALC1    PLA          ; GET COLUMN         CLC         ADC POINT0   ; ADD TO POINTER         STA POINT0         LDA POINT0+1         ADC #$00         STA POINT0+1         RTS          ; RETURN; BUFFER ROUTINES; --------------------INITBUF  LDA #$FF         STA KILLX         STA KILLY         RTSFILLBUF  LDY #$FFLOOP2    INY         LDA INITSNAKEX,Y ; WRITE INITIA         STA BUFX,Y     ; SNAKE TO         LDA INITSNAKEY,Y ; BUFFER         STA BUFY,Y         CMP #$FF         ; FF IS HEAD         BNE LOOP2         RTSINITSNAKEX .BYTE 16,17,18,19,20,20,$FFINITSNAKEY .BYTE 13,13,13,13,13,12,$FFMOVEBUF  LDY #$FF         LDA LONGER ; CHECK FOR ELONG         BNE MOVE0MOVNORM  LDA BUFX   ; SAVE END OF SNAKE         STA KILLX         LDA BUFY   ; WILL BE CLEARED         STA KILLY         LDY #$01MOVE1    LDA BUFX,Y ; LOAD X AND Y         LDX BUFY,Y ; POSITION         DEY        ; AND MOVE         CMP #$FF   ; HEAD OF SNAKE         BEQ MOVE2  ; CALC NEW HEAD         STA BUFX,Y ; BACK IN BUFFER         TXA         STA BUFY,Y         INY         INY         JMP MOVE1  ; REPEATMOVE0    INY         LDA BUFX,Y ; SEARCH FOR HEAD         CMP #$FF         BNE MOVE0         DEY          ; INDEX TO HEAD         DEC LONGER   ; DEC LONGER COUNT         JMP MOVE3MOVE2    DEYMOVE3    LDA DIR     ; TEST DIRECTION         CMP #$01     ; 1 --> UP         BEQ UP0         CMP #$02     ; 2 --> RIGHT         BEQ RIGHT0         CMP #$03     ; 3 --> DOWN         BEQ DOWN0    ; 4 --> LEFTLEFT0    LDX BUFY,Y         LDA BUFX,Y         BEQ MDEAD    ; LEFT BORDER         SEC          ; SET CARRY         SBC #$01     ; DEC XPOS         INY          ; NEXT BUF POS         STA BUFX,Y   ; WRITE X AND Y         TXA         STA BUFY,Y   ; POSITION         JMP MEND0UP0      LDX BUFX,Y         LDA BUFY,Y         CMP #$02         BEQ MDEAD         SEC         SBC #$01         INY         STA BUFY,Y         TXA         STA BUFX,Y         JMP MEND0RIGHT0   LDX BUFY,Y         LDA BUFX,Y         CMP #39         BEQ MDEAD         CLC         ADC #$01         INY         STA BUFX,Y         TXA         STA BUFY,Y         JMP MEND0DOWN0    LDX BUFX,Y         LDA BUFY,Y         CMP #24         BEQ MDEAD         CLC         ADC #$01         INY         STA BUFY,Y         TXA         STA BUFX,YMEND0    INY         LDA #$FF         STA BUFX,Y         STA BUFY,Y         RTSMDEAD    JSR GODEAD; IRQ ROUTINE TO HANDLE EVERY 60TH SEC;--------------------GOIRQ    DEC SPEED  ; DEC SPEED COUNT         LDA GORND  ; CHECK NEED RANDOM         TAX         BEQ EXIRQ  ; SKIP IF NOT NEEDED         LDA RANDOM ; LOAD FROM VOICE3         CPX #1         BNE SCRND         STA RANDL  ; TO LOW BYTE         INC GORND  ; SET LB IS DONE         JMP EXIRQSCRND    CPX #2         BNE EXIRQ         STA RANDH  ; TO HIGH BYTE         INC GORND  ; SET RANDOM CPLT 3EXIRQ    JMP $EA31